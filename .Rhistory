#Import required libraries
library(ezids)
library(ggplot2)
library(dplyr)
library(caret)
library(tidyverse)
library(pROC)
library(corrplot)
library(randomForest)
library(rpart)
library(glmnet)
#Setup knitter options
knitr::opts_chunk$set(warning = F, message = F)
options(scientific=T, digits = 3)
hotel_data <- read.csv("../../Dataset/INNHotelsGroup_min.csv")
str(hotel_data)
print(ggplot(hotel_data, aes(x = booking_status)) +
geom_bar(fill = "lightblue") +
labs(title = "Booking Status Distribution", x = "Booking Status", y = "Count"))
hotel_data$booking_status_binary <- ifelse(hotel_data$booking_status == "Canceled", 1, 0)
remove_zero_variance <- function(df) {
df[, sapply(df, function(col) sd(col, na.rm = TRUE) != 0)]
}
data_filtered <- remove_zero_variance(select_if(hotel_data, is.numeric))
cor_data <- cor(data_filtered, use = "complete.obs")
corrplot(cor_data, method = "color", addCoef.col = "black",
title = "Correlation Matrix Recap", number.cex = 1,
tl.cex = 0.8, mar = c(1, 1, 2, 1))
hotel_data$type_of_meal_plan <- as.factor(hotel_data$type_of_meal_plan)
hotel_data$room_type_reserved <- as.factor(hotel_data$room_type_reserved)
hotel_data$market_segment_type <- as.factor(hotel_data$market_segment_type)
hotel_data$booking_status_binary <- as.factor(hotel_data$booking_status_binary)
hotel_data$type_of_meal_plan <- as.factor(hotel_data$type_of_meal_plan)
hotel_data$room_type_reserved <- as.factor(hotel_data$room_type_reserved)
hotel_data$market_segment_type <- as.factor(hotel_data$market_segment_type)
hotel_data$booking_status_binary <- as.factor(hotel_data$booking_status_binary)
# Load the dataset (assuming the file is saved as CSV)
#data <- read.csv("../../Dataset/INNHotelsGroup_min.csv")
# Clean the data: convert booking_status to a binary factor variable
#data$booking_status <- factor(ifelse(data$booking_status == "Canceled", 1, 0), levels = c(0, 1))
# Convert categorical variables into factors
hotel_data$type_of_meal_plan <- as.factor(hotel_data$type_of_meal_plan)
hotel_data$room_type_reserved <- as.factor(hotel_data$room_type_reserved)
hotel_data$market_segment_type <- as.factor(hotel_data$market_segment_type)
# Handle missing values if needed (here we use mean imputation for simplicity)
#data[is.na(data)] <- lapply(data[is.na(data)], function(x) if(is.numeric(x)) mean(x, na.rm = TRUE) else x)
# Train a Random Forest model
rf_model1 <-randomForest(booking_status_binary ~ no_of_adults + no_of_children + no_of_weekend_nights +
no_of_week_nights + type_of_meal_plan + required_car_parking_space +
room_type_reserved + lead_time + arrival_year + arrival_month +
market_segment_type + repeated_guest +
no_of_previous_cancellations + avg_price_per_room + no_of_special_requests,
data = hotel_data, importance = TRUE, ntree = 100)
print(rf_model)
#Import required libraries
library(ezids)
library(ggplot2)
library(dplyr)
library(caret)
library(tidyverse)
library(pROC)
library(corrplot)
library(randomForest)
library(rpart)
library(glmnet)
#Setup knitter options
knitr::opts_chunk$set(warning = F, message = F)
options(scientific=T, digits = 3)
hotel_data <- read.csv("../../Dataset/INNHotelsGroup_min.csv")
str(hotel_data)
hotel_data$booking_status_binary <- ifelse(hotel_data$booking_status == "Canceled", 1, 0)
remove_zero_variance <- function(df) {
df[, sapply(df, function(col) sd(col, na.rm = TRUE) != 0)]
}
data_filtered <- remove_zero_variance(select_if(hotel_data, is.numeric))
cor_data <- cor(data_filtered, use = "complete.obs")
corrplot(cor_data, method = "color", addCoef.col = "black",
title = "Correlation Matrix Recap", number.cex = 1,
tl.cex = 0.8, mar = c(1, 1, 2, 1))
hotel_data$type_of_meal_plan <- as.factor(hotel_data$type_of_meal_plan)
hotel_data$room_type_reserved <- as.factor(hotel_data$room_type_reserved)
hotel_data$market_segment_type <- as.factor(hotel_data$market_segment_type)
hotel_data$booking_status_binary <- as.factor(hotel_data$booking_status_binary)
# Extract feature importance
feature_importance <- importance(rf_model1)
feature_importance
# Convert feature importance to a data frame for plotting
importance_df <- data.frame(Feature = rownames(feature_importance), Importance = feature_importance[,1])
importance_df <- importance_df[order(-importance_df$Importance),]
importance_df
# Plot feature importance using ggplot2
ggplot(importance_df, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flip the axes to make it easier to read
labs(title = "Feature Importance from Random Forest Model",
x = "Feature", y = "Importance") +
theme_minimal()
# Plot feature importance using ggplot2
ggplot(importance_df, aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity", fill = "steelblue") +
coord_flip() +  # Flip the axes to make it easier to read
labs(title = "Feature Importance from Random Forest Model",
x = "Feature", y = "Importance") +
theme_minimal()
predictions <- predict(rf_model, hotel_data, type = "response")
#Import required libraries
library(ezids)
library(ggplot2)
library(dplyr)
library(caret)
library(tidyverse)
library(pROC)
library(corrplot)
library(randomForest)
library(rpart)
library(glmnet)
#Setup knitter options
knitr::opts_chunk$set(warning = F, message = F)
options(scientific=T, digits = 3)
hotel_data <- read.csv("../../Dataset/INNHotelsGroup_min.csv")
str(hotel_data)
print(ggplot(hotel_data, aes(x = booking_status)) +
geom_bar(fill = "lightblue") +
labs(title = "Booking Status Distribution", x = "Booking Status", y = "Count"))
predictions <- predict(rf_model, hotel_data, type = "response")
hotel_data$type_of_meal_plan <- as.factor(hotel_data$type_of_meal_plan)
hotel_data$room_type_reserved <- as.factor(hotel_data$room_type_reserved)
hotel_data$market_segment_type <- as.factor(hotel_data$market_segment_type)
hotel_data$booking_status_binary <- as.factor(hotel_data$booking_status_binary)
predictions <- predict(rf_model, hotel_data, type = "response")
knitr::opts_chunk$set(echo = TRUE)
hotel_data <- read.csv("../../Dataset/INNHotelsGroup_min.csv")
hotel_data <- read.csv("../../Dataset/INNHotelsGroup_min.csv")
#Import required libraries
library(ezids)
library(ggplot2)
library(dplyr)
library(caret)
library(tidyverse)
library(pROC)
library(corrplot)
library(randomForest)
library(rpart)
library(glmnet)
#Setup knitter options
knitr::opts_chunk$set(warning = F, message = F)
options(scientific=T, digits = 3)
prepare_booking_data <- function(hotel_data) {
booking_data <- hotel_data %>%
mutate(
high_demand = as.factor(ifelse(
avg_price_per_room > quantile(avg_price_per_room, 0.75),
1, 0
)),
booking_month = as.factor(arrival_month),
is_weekend = no_of_weekend_nights > 0,
total_nights = no_of_weekend_nights + no_of_week_nights,
is_repeated_guest = repeated_guest > 0
)
return(booking_data)
}
prepared_data <- prepare_booking_data(hotel_data)
set.seed(123)
train_index <- createDataPartition(prepared_data$high_demand, p = 0.7, list = FALSE)
train_data <- prepared_data[train_index, ]
test_data <- prepared_data[-train_index, ]
# Random Forest Model
rf_model <- randomForest(
high_demand ~ lead_time +
total_nights +
booking_month +
market_segment_type +
is_repeated_guest,
data = train_data,
ntree = 500,
importance = TRUE
)
evaluate_model <- function(actual, predicted, model_name) {
conf_matrix <- confusionMatrix(as.factor(predicted), as.factor(actual))
results <- data.frame(
Model = model_name,
Accuracy = conf_matrix$overall['Accuracy'],
Precision = conf_matrix$byClass['Precision'],
Recall = conf_matrix$byClass['Recall'],
F1 = conf_matrix$byClass['F1']
)
return(results)
}
rf_pred <- predict(rf_model, newdata = test_data, type = "prob")[,2]
rf_class <- ifelse(rf_pred > 0.5, 1, 0)
rf_results <- evaluate_model(test_data$high_demand, rf_class, "Random Forest")
print(rf_results)
rf_importance <- data.frame(
Feature = rownames(importance(rf_model)),
Importance = importance(rf_model)[,1]
) %>% arrange(desc(Importance))
print(head(rf_importance, 10))
ggplot(head(rf_importance, 10), aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Features Predicting High-Demand Periods",
x = "Features",
y = "Importance"
) +
theme_minimal()
ggplot(head(rf_importance, 10), aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top Features Predicting High-Demand Periods",
x = "Features",
y = "Importance"
) +
theme_minimal()
