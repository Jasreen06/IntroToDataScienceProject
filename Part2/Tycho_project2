---
title: "project2"
author: "Tycho Gormley"
date: "2024-12-03"
output: html_document
---

```{r init, include=FALSE}
#Import required libraries
library(ezids)
library(ggplot2)
library(dplyr)
library(corrplot)

#Setup knitter options
knitr::opts_chunk$set(warning = F, message = F)
options(scientific=T, digits = 3)
```

```{r import_dataset}
hotel_data <- read.csv("INNHotelsGroup.csv")
```

```{r data_structure}
str(hotel_data)
```

```{r clean_data}
hotel_data_clean <- hotel_data[, c("no_of_adults", "no_of_children", "no_of_weekend_nights", "no_of_week_nights", "type_of_meal_plan", "required_car_parking_space", "room_type_reserved", "lead_time", "arrival_year", "arrival_month",  "market_segment_type", "repeated_guest", "no_of_previous_cancellations", "no_of_special_requests", "booking_status", 
"avg_price_per_room")]

hotel_data_clean <- na.omit(hotel_data_clean)
```


```{r save_data}
write.csv(hotel_data_clean,"INNHotelsGroup_min.csv", row.names = F)
```


```{r}
## Summary statistics for numerical columns
num_cols <- sapply(hotel_data_clean, is.numeric)
print(summary(hotel_data_clean[ , num_cols]))
```




```{r correlation, fig.width=15, fig.height=10}
# Convert booking_status to a binary variable
hotel_data_clean$booking_status_binary <- ifelse(hotel_data_clean$booking_status == "Canceled", 1, 0)

# Function to remove columns with zero variance
remove_zero_variance <- function(df) {
  df[, sapply(df, function(col) sd(col, na.rm = TRUE) != 0)]
}

# Remove columns with zero variance
data_filtered <- remove_zero_variance(select_if(hotel_data_clean, is.numeric))

# Calculate the correlation matrix
cor_data <- cor(data_filtered, use = "complete.obs")

# Visualize the correlation matrix
corrplot(cor_data, method = "color", addCoef.col = "black", 
         title = "Correlation Matrix for Entire Dataset", number.cex = 1, 
         tl.cex = 0.8, mar = c(1, 1, 2, 1))
```










### **Seasonality Analysis:**
```{r define_season}
# Define seasons based on arrival month
hotel_data_clean$season <- case_when(
  hotel_data_clean$arrival_month %in% c(3, 4, 5) ~ "Spring",
  hotel_data_clean$arrival_month %in% c(6, 7, 8) ~ "Summer",
  hotel_data_clean$arrival_month %in% c(9, 10, 11) ~ "Fall",
  hotel_data_clean$arrival_month %in% c(12, 1, 2) ~ "Winter",
  TRUE ~ "Unknown"
)
# Convert booking_status to a binary variable
hotel_data_clean$booking_status_binary <- ifelse(hotel_data_clean$booking_status == "Canceled", 1, 0)
```

### **Creating subsets for each season:**
```{r subset_creation}
# Create subsets for each season
spring_data <- subset(hotel_data_clean, season == "Spring")
summer_data <- subset(hotel_data_clean, season == "Summer")
fall_data <- subset(hotel_data_clean, season == "Fall")
winter_data <- subset(hotel_data_clean, season == "Winter")
```

### **Remove columns with zero variance:**
```{r remove_column}
# Function to remove columns with zero variance
remove_zero_variance <- function(df) {
  df[, sapply(df, function(col) sd(col, na.rm = TRUE) != 0)]
}

# Remove zero variance columns for each season
spring_data_filtered <- remove_zero_variance(select_if(spring_data, is.numeric))
summer_data_filtered <- remove_zero_variance(select_if(summer_data, is.numeric))
fall_data_filtered <- remove_zero_variance(select_if(fall_data, is.numeric))
winter_data_filtered <- remove_zero_variance(select_if(winter_data, is.numeric))
```

### **Calculate correlation matrices:**
```{r seasonal_correlation, fig.width=15, fig.height=10}
# Calculate and visualize correlation for Spring
cor_spring <- cor(spring_data_filtered, use = "complete.obs")
corrplot(cor_spring, method = "color", addCoef.col = "black", 
         title = "Correlation Matrix for Spring", number.cex = 1, 
         tl.cex = 0.8, mar = c(1, 1, 2, 1))

# Calculate and visualize correlation for Summer
cor_summer <- cor(summer_data_filtered, use = "complete.obs")
corrplot(cor_summer, method = "color", addCoef.col = "black", 
         title = "Correlation Matrix for Summer", number.cex = 1, 
         tl.cex = 0.8, mar = c(1, 1, 2, 1))

# Calculate and visualize correlation for Fall
cor_fall <- cor(fall_data_filtered, use = "complete.obs")
corrplot(cor_fall, method = "color", addCoef.col = "black", 
         title = "Correlation Matrix for Fall", number.cex = 1, 
         tl.cex = 0.8, mar = c(1, 1, 2, 1))

# Calculate and visualize correlation for Winter
cor_winter <- cor(winter_data_filtered, use = "complete.obs")
corrplot(cor_winter, method = "color", addCoef.col = "black", 
         title = "Correlation Matrix for Winter", number.cex = 1, 
         tl.cex = 0.8, mar = c(1, 1, 2, 1))
```


```{r}
### Logistic Regression: Impact of Seasonality on Booking Status
# Fit logistic regression model
logit_model <- glm(booking_status_binary ~ season, family = binomial, data = hotel_data_clean)

# Summarize the logistic regression model
summary(logit_model)

# Calculate odds ratios for the season coefficients
odds_ratios <- exp(coef(logit_model))
print(odds_ratios)

# Predict probabilities using the logistic regression model
hotel_data_clean$predicted_probs <- predict(logit_model, type = "response")

# Classify predictions using a 0.5 cutoff
hotel_data_clean$predicted_class <- ifelse(hotel_data_clean$predicted_probs >= 0.5, 1, 0)

# Confusion matrix
confusion_matrix <- table(Predicted = hotel_data_clean$predicted_class, Actual = hotel_data_clean$booking_status_binary)
print(confusion_matrix)

# Calculate accuracy
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
cat("Accuracy:", accuracy, "\n")
```



```{r}
# Fit a decision tree with adjusted parameters
tree_model <- rpart(
  booking_status_binary ~ season + lead_time + no_of_special_requests,
  data = hotel_data_clean,
  method = "class",
  control = rpart.control(cp = 0.001, minsplit = 10, maxdepth = 5)  # Lower cp and minsplit to allow more splits
)

# Plot the updated decision tree
rpart.plot(tree_model, type = 3, extra = 102, fallen.leaves = TRUE, 
           main = "Decision Tree: Seasonal Trends and Cancellations")
```
