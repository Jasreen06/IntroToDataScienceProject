train_data <- hotel_data[train_index, ]
test_data <- hotel_data[-train_index, ]
logistic_model <- glm(
booking_status_binary ~ lead_time +
no_of_adults +
no_of_children +
market_segment_type +
no_of_previous_cancellations +
no_of_special_requests,
data = train_data,
family = binomial()
)
summary(logistic_model)
test_predictions <- predict(logistic_model, newdata = test_data, type = "response")
predicted_classes <- ifelse(test_predictions > 0.5, 1, 0)
confusion_matrix <- table(Actual = test_data$booking_status_binary,
Predicted = predicted_classes)
print("Confusion Matrix:")
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
precision <- confusion_matrix[2,2] / sum(confusion_matrix[,2])
recall <- confusion_matrix[2,2] / sum(confusion_matrix[2,])
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("\nModel Performance Metrics:\n")
cat("Accuracy:", round(accuracy, 4), "\n")
cat("Precision:", round(precision, 4), "\n")
cat("Recall:", round(recall, 4), "\n")
cat("F1 Score:", round(f1_score, 4), "\n")
roc_curve <- roc(test_data$booking_status_binary, test_predictions)
plot(roc_curve, main = "ROC Curve for Booking Cancellation Prediction")
auc_value <- auc(roc_curve)
cat("\nArea Under the ROC Curve (AUC):", round(auc_value, 4), "\n")
ggplot(hotel_data, aes(x = lead_time, y = booking_status_binary)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE) +
labs(
title = "Probability of Booking Cancellation vs Lead Time",
x = "Lead Time (Days)",
y = "Probability of Cancellation"
) +
theme_minimal()
prepare_booking_data <- function(hotel_data) {
booking_data <- hotel_data %>%
mutate(
# Create binary high-demand indicator (above 75th percentile of bookings)
high_demand = as.factor(ifelse(
avg_price_per_room > quantile(avg_price_per_room, 0.75),
1, 0
)),
booking_month = as.factor(arrival_month),
is_weekend = no_of_weekend_nights > 0,
total_nights = no_of_weekend_nights + no_of_week_nights,
is_repeated_guest = repeated_guest > 0
)
return(booking_data)
}
prepared_data <- prepare_booking_data(hotel_data)
set.seed(123)
train_index <- createDataPartition(prepared_data$high_demand, p = 0.7, list = FALSE)
train_data <- prepared_data[train_index, ]
test_data <- prepared_data[-train_index, ]
# Logistic Regression Model
logistic_model <- glm(
high_demand ~ lead_time +
no_of_adults +
no_of_children +
total_nights +
booking_month +
market_segment_type +
is_repeated_guest,
data = train_data,
family = binomial()
)
logistic_pred <- predict(logistic_model, newdata = test_data, type = "response")
logistic_class <- ifelse(logistic_pred > 0.5, 1, 0)
# Random Forest Model
rf_model <- randomForest(
high_demand ~ lead_time +
no_of_adults +
no_of_children +
total_nights +
booking_month +
market_segment_type +
is_repeated_guest,
data = train_data,
ntree = 500,
importance = TRUE
)
# Predictions for Random Forest
rf_pred <- predict(rf_model, newdata = test_data, type = "prob")[,2]
rf_class <- ifelse(rf_pred > 0.5, 1, 0)
evaluate_model <- function(actual, predicted, model_name) {
conf_matrix <- confusionMatrix(as.factor(predicted), as.factor(actual))
results <- data.frame(
Model = model_name,
Accuracy = conf_matrix$overall['Accuracy'],
Precision = conf_matrix$byClass['Precision'],
Recall = conf_matrix$byClass['Recall'],
F1 = conf_matrix$byClass['F1']
)
return(results)
}
logistic_results <- evaluate_model(test_data$high_demand, logistic_class, "Logistic Regression")
rf_results <- evaluate_model(test_data$high_demand, rf_class, "Random Forest")
model_comparison <- rbind(logistic_results, rf_results)
print(model_comparison)
rf_importance <- data.frame(
Feature = rownames(importance(rf_model)),
Importance = importance(rf_model)[,1]
) %>% arrange(desc(Importance))
print(head(rf_importance, 10))
ggplot(head(rf_importance, 10), aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Features Predicting High-Demand Periods",
x = "Features",
y = "Importance"
) +
theme_minimal()
# Predict High-Demand Periods
predict_high_demand_periods <- function(model, test_data) {
pred_probs <- predict(model, newdata = test_data, type = "response")
high_demand_periods <- test_data[pred_probs > 0.7, ]
return(high_demand_periods)
}
print(head(rf_importance, 5))
print(model_comparison)
set.seed(123)
train_index <- createDataPartition(hotel_data$booking_status_binary, p = 0.7, list = FALSE)
#Import required libraries
library(ezids)
library(ggplot2)
library(dplyr)
library(caret)
library(tidyverse)
library(pROC)
library(corrplot)
library(randomForest)
library(rpart)
library(glmnet)
#Setup knitter options
knitr::opts_chunk$set(warning = F, message = F)
options(scientific=T, digits = 3)
hotel_data <- read.csv("C:/Users/dhawa/Documents/IntroToDataScienceProject/Dataset/INNHotelsGroup_min.csv")
str(hotel_data)
print(ggplot(hotel_data, aes(x = booking_status)) +
geom_bar(fill = "lightblue") +
labs(title = "Booking Status Distribution", x = "Booking Status", y = "Count"))
hotel_data$booking_status_binary <- ifelse(hotel_data$booking_status == "Canceled", 1, 0)
remove_zero_variance <- function(df) {
df[, sapply(df, function(col) sd(col, na.rm = TRUE) != 0)]
}
data_filtered <- remove_zero_variance(select_if(hotel_data, is.numeric))
cor_data <- cor(data_filtered, use = "complete.obs")
corrplot(cor_data, method = "color", addCoef.col = "black",
title = "Correlation Matrix Recap", number.cex = 1,
tl.cex = 0.8, mar = c(1, 1, 2, 1))
set.seed(123)
train_index <- createDataPartition(hotel_data$booking_status_binary, p = 0.7, list = FALSE)
train_data <- hotel_data[train_index, ]
test_data <- hotel_data[-train_index, ]
logistic_model <- glm(
booking_status_binary ~ lead_time,
data = train_data,
family = binomial()
)
summary(logistic_model)
test_predictions <- predict(logistic_model, newdata = test_data, type = "response")
predicted_classes <- ifelse(test_predictions > 0.5, 1, 0)
confusion_matrix <- table(Actual = test_data$booking_status_binary,
Predicted = predicted_classes)
print("Confusion Matrix:")
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
precision <- confusion_matrix[2,2] / sum(confusion_matrix[,2])
recall <- confusion_matrix[2,2] / sum(confusion_matrix[2,])
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("\nModel Performance Metrics:\n")
cat("Accuracy:", round(accuracy, 4), "\n")
cat("Precision:", round(precision, 4), "\n")
cat("Recall:", round(recall, 4), "\n")
cat("F1 Score:", round(f1_score, 4), "\n")
roc_curve <- roc(test_data$booking_status_binary, test_predictions)
plot(roc_curve, main = "ROC Curve for Booking Cancellation Prediction")
auc_value <- auc(roc_curve)
cat("Area Under the ROC Curve (AUC):", round(auc_value, 4), "\n")
ggplot(hotel_data, aes(x = lead_time, y = booking_status_binary)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE) +
labs(
title = "Probability of Booking Cancellation vs Lead Time",
x = "Lead Time (Days)",
y = "Probability of Cancellation"
) +
theme_minimal()
prepare_booking_data <- function(hotel_data) {
booking_data <- hotel_data %>%
mutate(
# Create binary high-demand indicator (above 75th percentile of bookings)
high_demand = as.factor(ifelse(
avg_price_per_room > quantile(avg_price_per_room, 0.75),
1, 0
)),
booking_month = as.factor(arrival_month),
is_weekend = no_of_weekend_nights > 0,
total_nights = no_of_weekend_nights + no_of_week_nights,
is_repeated_guest = repeated_guest > 0
)
return(booking_data)
}
prepared_data <- prepare_booking_data(hotel_data)
set.seed(123)
train_index <- createDataPartition(prepared_data$high_demand, p = 0.7, list = FALSE)
train_data <- prepared_data[train_index, ]
test_data <- prepared_data[-train_index, ]
# Logistic Regression Model
logistic_model <- glm(
high_demand ~ lead_time +
no_of_adults +
no_of_children +
total_nights +
booking_month +
market_segment_type +
is_repeated_guest,
data = train_data,
family = binomial()
)
logistic_pred <- predict(logistic_model, newdata = test_data, type = "response")
logistic_class <- ifelse(logistic_pred > 0.5, 1, 0)
# Random Forest Model
rf_model <- randomForest(
high_demand ~ lead_time +
no_of_adults +
no_of_children +
total_nights +
booking_month +
market_segment_type +
is_repeated_guest,
data = train_data,
ntree = 500,
importance = TRUE
)
# Predictions for Random Forest
rf_pred <- predict(rf_model, newdata = test_data, type = "prob")[,2]
rf_class <- ifelse(rf_pred > 0.5, 1, 0)
evaluate_model <- function(actual, predicted, model_name) {
conf_matrix <- confusionMatrix(as.factor(predicted), as.factor(actual))
results <- data.frame(
Model = model_name,
Accuracy = conf_matrix$overall['Accuracy'],
Precision = conf_matrix$byClass['Precision'],
Recall = conf_matrix$byClass['Recall'],
F1 = conf_matrix$byClass['F1']
)
return(results)
}
logistic_results <- evaluate_model(test_data$high_demand, logistic_class, "Logistic Regression")
rf_results <- evaluate_model(test_data$high_demand, rf_class, "Random Forest")
model_comparison <- rbind(logistic_results, rf_results)
print(model_comparison)
rf_importance <- data.frame(
Feature = rownames(importance(rf_model)),
Importance = importance(rf_model)[,1]
) %>% arrange(desc(Importance))
print(head(rf_importance, 10))
ggplot(head(rf_importance, 10), aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Features Predicting High-Demand Periods",
x = "Features",
y = "Importance"
) +
theme_minimal()
# Predict High-Demand Periods
predict_high_demand_periods <- function(model, test_data) {
pred_probs <- predict(model, newdata = test_data, type = "response")
high_demand_periods <- test_data[pred_probs > 0.7, ]
return(high_demand_periods)
}
print(head(rf_importance, 5))
print(model_comparison)
ggplot(hotel_data, aes(x = lead_time, y = booking_status_binary)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE) +
labs(
title = "Probability of Booking Cancellation vs Lead Time",
x = "Lead Time (Days)",
y = "Probability of Cancellation"
) +
theme_minimal()
roc_curve <- roc(test_data$booking_status_binary, test_predictions)
plot(roc_curve, main = "ROC Curve for Booking Cancellation Prediction")
auc_value <- auc(roc_curve)
cat("Area Under the ROC Curve (AUC):", round(auc_value, 4), "\n")
roc_curve <- roc(test_data$booking_status_binary, test_predictions)
plot(roc_curve, main = "ROC Curve for Booking Cancellation Prediction")
auc_value <- auc(roc_curve)
cat("Area Under the ROC Curve (AUC):", round(auc_value, 4), "\n")
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
precision <- confusion_matrix[2,2] / sum(confusion_matrix[,2])
recall <- confusion_matrix[2,2] / sum(confusion_matrix[2,])
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("\nModel Performance Metrics:\n")
cat("Accuracy:", round(accuracy, 4), "\n")
cat("Precision:", round(precision, 4), "\n")
cat("Recall:", round(recall, 4), "\n")
cat("F1 Score:", round(f1_score, 4), "\n")
set.seed(123)
train_index <- createDataPartition(hotel_data$booking_status_binary, p = 0.7, list = FALSE)
train_data <- hotel_data[train_index, ]
test_data <- hotel_data[-train_index, ]
logistic_model <- glm(
booking_status_binary ~ lead_time,
data = train_data,
family = binomial()
)
summary(logistic_model)
test_predictions <- predict(logistic_model, newdata = test_data, type = "response")
predicted_classes <- ifelse(test_predictions > 0.5, 1, 0)
confusion_matrix <- table(Actual = test_data$booking_status_binary,
Predicted = predicted_classes)
print("Confusion Matrix:")
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
precision <- confusion_matrix[2,2] / sum(confusion_matrix[,2])
recall <- confusion_matrix[2,2] / sum(confusion_matrix[2,])
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("\nModel Performance Metrics:\n")
cat("Accuracy:", round(accuracy, 4), "\n")
cat("Precision:", round(precision, 4), "\n")
cat("Recall:", round(recall, 4), "\n")
cat("F1 Score:", round(f1_score, 4), "\n")
roc_curve <- roc(test_data$booking_status_binary, test_predictions)
plot(roc_curve, main = "ROC Curve for Booking Cancellation Prediction")
auc_value <- auc(roc_curve)
cat("Area Under the ROC Curve (AUC):", round(auc_value, 4), "\n")
ggplot(hotel_data, aes(x = lead_time, y = booking_status_binary)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE) +
labs(
title = "Probability of Booking Cancellation vs Lead Time",
x = "Lead Time (Days)",
y = "Probability of Cancellation"
) +
theme_minimal()
clear
hi
#Import required libraries
library(ezids)
library(ggplot2)
library(dplyr)
library(caret)
library(tidyverse)
library(pROC)
library(corrplot)
library(randomForest)
library(rpart)
library(glmnet)
#Setup knitter options
knitr::opts_chunk$set(warning = F, message = F)
options(scientific=T, digits = 3)
hotel_data <- read.csv("C:/Users/dhawa/Documents/IntroToDataScienceProject/Dataset/INNHotelsGroup_min.csv")
str(hotel_data)
print(ggplot(hotel_data, aes(x = booking_status)) +
geom_bar(fill = "lightblue") +
labs(title = "Booking Status Distribution", x = "Booking Status", y = "Count"))
hotel_data$booking_status_binary <- ifelse(hotel_data$booking_status == "Canceled", 1, 0)
remove_zero_variance <- function(df) {
df[, sapply(df, function(col) sd(col, na.rm = TRUE) != 0)]
}
data_filtered <- remove_zero_variance(select_if(hotel_data, is.numeric))
cor_data <- cor(data_filtered, use = "complete.obs")
corrplot(cor_data, method = "color", addCoef.col = "black",
title = "Correlation Matrix Recap", number.cex = 1,
tl.cex = 0.8, mar = c(1, 1, 2, 1))
set.seed(123)
train_index <- createDataPartition(hotel_data$booking_status_binary, p = 0.7, list = FALSE)
train_data <- hotel_data[train_index, ]
test_data <- hotel_data[-train_index, ]
logistic_model <- glm(
booking_status_binary ~ lead_time,
data = train_data,
family = binomial()
)
summary(logistic_model)
test_predictions <- predict(logistic_model, newdata = test_data, type = "response")
predicted_classes <- ifelse(test_predictions > 0.5, 1, 0)
confusion_matrix <- table(Actual = test_data$booking_status_binary,
Predicted = predicted_classes)
print("Confusion Matrix:")
print(confusion_matrix)
accuracy <- sum(diag(confusion_matrix)) / sum(confusion_matrix)
precision <- confusion_matrix[2,2] / sum(confusion_matrix[,2])
recall <- confusion_matrix[2,2] / sum(confusion_matrix[2,])
f1_score <- 2 * (precision * recall) / (precision + recall)
cat("\nModel Performance Metrics:\n")
cat("Accuracy:", round(accuracy, 4), "\n")
cat("Precision:", round(precision, 4), "\n")
cat("Recall:", round(recall, 4), "\n")
cat("F1 Score:", round(f1_score, 4), "\n")
roc_curve <- roc(test_data$booking_status_binary, test_predictions)
plot(roc_curve, main = "ROC Curve for Booking Cancellation Prediction")
auc_value <- auc(roc_curve)
cat("Area Under the ROC Curve (AUC):", round(auc_value, 4), "\n")
ggplot(hotel_data, aes(x = lead_time, y = booking_status_binary)) +
geom_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE) +
labs(
title = "Probability of Booking Cancellation vs Lead Time",
x = "Lead Time (Days)",
y = "Probability of Cancellation"
) +
theme_minimal()
prepare_booking_data <- function(hotel_data) {
booking_data <- hotel_data %>%
mutate(
high_demand = as.factor(ifelse(
avg_price_per_room > quantile(avg_price_per_room, 0.75),
1, 0
)),
booking_month = as.factor(arrival_month),
is_weekend = no_of_weekend_nights > 0,
total_nights = no_of_weekend_nights + no_of_week_nights,
is_repeated_guest = repeated_guest > 0
)
return(booking_data)
}
prepared_data <- prepare_booking_data(hotel_data)
set.seed(123)
train_index <- createDataPartition(prepared_data$high_demand, p = 0.7, list = FALSE)
train_data <- prepared_data[train_index, ]
test_data <- prepared_data[-train_index, ]
# Random Forest Model
rf_model <- randomForest(
high_demand ~ lead_time +
no_of_adults +
no_of_children +
total_nights +
booking_month +
market_segment_type +
is_repeated_guest,
data = train_data,
ntree = 500,
importance = TRUE
)
evaluate_model <- function(actual, predicted, model_name) {
conf_matrix <- confusionMatrix(as.factor(predicted), as.factor(actual))
results <- data.frame(
Model = model_name,
Accuracy = conf_matrix$overall['Accuracy'],
Precision = conf_matrix$byClass['Precision'],
Recall = conf_matrix$byClass['Recall'],
F1 = conf_matrix$byClass['F1']
)
return(results)
}
rf_pred <- predict(rf_model, newdata = test_data, type = "prob")[,2]
rf_class <- ifelse(rf_pred > 0.5, 1, 0)
rf_results <- evaluate_model(test_data$high_demand, rf_class, "Random Forest")
rf_importance <- data.frame(
Feature = rownames(importance(rf_model)),
Importance = importance(rf_model)[,1]
) %>% arrange(desc(Importance))
# Random Forest Model
rf_model <- randomForest(
high_demand ~ lead_time +
no_of_adults +
no_of_children +
total_nights +
booking_month +
market_segment_type +
is_repeated_guest,
data = train_data,
ntree = 500,
importance = TRUE
)
rf_results <- evaluate_model(test_data$high_demand, rf_class, "Random Forest")
rf_results <- evaluate_model(test_data$high_demand, rf_class, "Random Forest")
print(rf_results)
rf_importance <- data.frame(
Feature = rownames(importance(rf_model)),
Importance = importance(rf_model)[,1]
) %>% arrange(desc(Importance))
print(head(rf_importance, 10))
ggplot(head(rf_importance, 10), aes(x = reorder(Feature, Importance), y = Importance)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Features Predicting High-Demand Periods",
x = "Features",
y = "Importance"
) +
theme_minimal()
predict_high_demand_periods <- function(model, test_data) {
pred_probs <- predict(model, newdata = test_data, type = "response")
high_demand_periods <- test_data[pred_probs > 0.7, ]
return(high_demand_periods)
}
high_demand_periods <- predict_high_demand_periods(rf_model, test_data)
predict_high_demand_periods <- function(model, test_data) {
pred_probs <- predict(model, newdata = test_data, type = "response")
high_demand_periods <- test_data[pred_probs > 0.5, ]
return(high_demand_periods)
}
high_demand_periods <- predict_high_demand_periods(rf_model, test_data)
predict_high_demand_periods <- function(model, test_data) {
pred_probs <- predict(model, newdata = test_data, type = "prob")[,2]
high_demand_periods <- test_data[pred_probs > 0.7, ]
print("High-Demand Periods Prediction:")
print(paste("Total High-Demand Periods:", sum(pred_probs > 0.7)))
print("Sample of High-Demand Periods:")
print(head(high_demand_periods))
return(high_demand_periods)
}
high_demand_periods <- predict_high_demand_periods(rf_model, test_data)
